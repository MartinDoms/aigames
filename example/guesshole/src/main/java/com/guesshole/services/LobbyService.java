package com.guesshole.services;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.guesshole.entities.GameConfiguration;
import com.guesshole.entities.Lobby;
import com.guesshole.repositories.GameConfigurationRepository;
import com.guesshole.repositories.LobbyRepository;
import com.guesshole.websocket.services.WebSocketSessionService;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Service;
import org.springframework.web.reactive.socket.WebSocketSession;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

import java.util.UUID;

/**
 * Service for lobby-related operations.
 */
@Service
public class LobbyService {
    private static final Logger log = LoggerFactory.getLogger(LobbyService.class);

    private final ObjectMapper objectMapper;
    private final WebSocketSessionService sessionHandler;
    private final LobbyRepository lobbyRepository;
    private final GameConfigurationRepository gameConfigurationRepository;

    public LobbyService(ObjectMapper objectMapper, WebSocketSessionService sessionHandler, LobbyRepository lobbyRepository, GameConfigurationRepository gameConfigurationRepository) {
        this.objectMapper = objectMapper;
        this.sessionHandler = sessionHandler;
        this.lobbyRepository = lobbyRepository;
        this.gameConfigurationRepository = gameConfigurationRepository;
    }

    /**
     * Create a new lobby with an auto-generated short code
     * @param name The name of the lobby
     * @param privacy The privacy setting of the lobby
     * @return A Mono containing the created lobby with its generated short code
     */
    public Mono<Lobby> createLobby(String name, String privacy) {
        Lobby lobby = new Lobby(name, privacy);
        lobby.setId(UUID.randomUUID());
        // The short_code will be automatically generated by the database trigger
        return lobbyRepository.save(lobby)
                .doOnSuccess(savedLobby -> log.debug("Created lobby: {}", savedLobby));
    }

    public Mono<Lobby> setLobbyGameConfiguration(UUID lobbyId, GameConfiguration gameConfiguration) {
        return lobbyRepository.findById(lobbyId)
                .flatMap(lobby -> gameConfigurationRepository.save(gameConfiguration)
                        .flatMap(savedGameConfiguration -> {
                            lobby.setGameConfiguration(savedGameConfiguration);
                            return lobbyRepository.save(lobby).thenReturn(lobby);
                        }));
    }

    /**
     * Find a lobby by its ID and populate its game configuration.
     * @param id The UUID of the lobby
     * @return A Mono containing the lobby if found, with its game configuration.
     */
    public Mono<Lobby> findById(UUID id) {
        return lobbyRepository.findById(id)
                .flatMap(this::populateGameConfiguration);
    }

    /**
     * Find a lobby by its short code and populate its game configuration.
     * @param shortCode The short code to search for
     * @return A Mono containing the lobby if found, with its game configuration.
     */
    public Mono<Lobby> findByShortCode(String shortCode) {
        return lobbyRepository.findByShortCode(shortCode)
                .doOnSuccess(lobby -> {
                    if (lobby != null) {
                        log.debug("Found lobby by short code {}: {}", shortCode, lobby);
                    } else {
                        log.debug("No lobby found with short code: {}", shortCode);
                    }
                })
                .flatMap(this::populateGameConfiguration);
    }

    /**
     * Populates the GameConfiguration for a given Lobby.
     * If the lobby has a gameConfigurationId, it fetches the configuration and attaches it.
     * If not, or if the configuration is not found, it returns the lobby as-is.
     * @param lobby The lobby to populate.
     * @return A Mono containing the lobby, possibly with its GameConfiguration.
     */
    private Mono<Lobby> populateGameConfiguration(Lobby lobby) {
        if (lobby.getGameConfigurationId() == null) {
            return Mono.just(lobby);
        }
        return gameConfigurationRepository.findById(lobby.getGameConfigurationId())
                .map(gameConfiguration -> {
                    lobby.setGameConfiguration(gameConfiguration);
                    return lobby;
                })
                .defaultIfEmpty(lobby);
    }


    /**
     * Broadcast a message to all clients in a lobby
     */
    public Mono<Void> broadcastToLobby(UUID lobbyId, Object message) {
        try {
            String messageJson = objectMapper.writeValueAsString(message);
            log.debug("Broadcasting to lobby {}: {}", lobbyId, messageJson);

            return Flux.fromIterable(sessionHandler.getLobbySessions(lobbyId))
                    .filter(WebSocketSession::isOpen)
                    .flatMap(session -> sendJsonToSession(session, messageJson))
                    .then();
        } catch (JsonProcessingException e) {
            log.error("Error serializing broadcast message", e);
            return Mono.error(e);
        }
    }

    /**
     * Send a message to a specific session
     */
    public Mono<Void> sendToSession(WebSocketSession session, Object message) {
        if (!session.isOpen()) {
            return Mono.empty();
        }

        try {
            String messageJson = objectMapper.writeValueAsString(message);
            return sendJsonToSession(session, messageJson);
        } catch (JsonProcessingException e) {
            log.error("Error serializing message for session {}", session.getId(), e);
            return Mono.error(e);
        }
    }

    /**
     * Helper method to send a JSON string to a session
     */
    private Mono<Void> sendJsonToSession(WebSocketSession session, String json) {
        return session.send(Mono.just(session.textMessage(json)))
                .onErrorResume(e -> {
                    log.error("Error sending message to session {}: {}",
                            session.getId(), e.getMessage());
                    return Mono.empty();
                });
    }
}
