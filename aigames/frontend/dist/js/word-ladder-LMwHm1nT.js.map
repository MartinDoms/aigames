{"version":3,"file":"word-ladder-LMwHm1nT.js","sources":["../../src/js/word-ladder.js"],"sourcesContent":["import '../css/main.css';\nimport Alpine from 'alpinejs';\n\nwindow.Alpine = Alpine;\n\nAlpine.data('wordLadder', () => ({\n  startWord: 'cat',\n  endWord: 'dog',\n  currentWord: '',\n  wordChain: [],\n  currentInput: '',\n  isCompleted: false,\n  score: 0,\n  moves: 0,\n  error: '',\n  hints: [],\n  showHints: false,\n  loading: false,\n  optimalSteps: 0,\n\n  async init() {\n    await this.loadRandomPair();\n    this.resetGame();\n  },\n\n  async loadRandomPair() {\n    try {\n      this.loading = true;\n      const response = await fetch('/api/word-ladder/random-pair');\n      const pair = await response.json();\n      this.startWord = pair.startWord;\n      this.endWord = pair.endWord;\n      await this.checkOptimalSolution();\n    } catch (error) {\n      console.error('Failed to load word pair:', error);\n      this.error = 'Failed to load new puzzle';\n    } finally {\n      this.loading = false;\n    }\n  },\n\n  async checkOptimalSolution() {\n    try {\n      const response = await fetch('/api/word-ladder/check-solution', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({\n          startWord: this.startWord,\n          endWord: this.endWord\n        })\n      });\n      const result = await response.json();\n      this.optimalSteps = result.optimalSteps;\n    } catch (error) {\n      console.error('Failed to check solution:', error);\n    }\n  },\n\n  resetGame() {\n    this.currentWord = this.startWord;\n    this.wordChain = [this.startWord];\n    this.currentInput = '';\n    this.isCompleted = false;\n    this.score = 0;\n    this.moves = 0;\n    this.error = '';\n    this.hints = [];\n    this.showHints = false;\n  },\n\n  async makeMove() {\n    if (!this.currentInput.trim()) {\n      this.error = 'Please enter a word';\n      return;\n    }\n\n    const newWord = this.currentInput.trim().toLowerCase();\n    \n    try {\n      const response = await fetch('/api/word-ladder/validate-move', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({\n          fromWord: this.currentWord,\n          toWord: newWord\n        })\n      });\n      \n      const result = await response.json();\n      \n      if (result.isValid) {\n        this.wordChain.push(newWord);\n        this.currentWord = newWord;\n        this.moves++;\n        this.currentInput = '';\n        this.error = '';\n\n        // Check if puzzle is solved\n        if (newWord === this.endWord) {\n          this.isCompleted = true;\n          this.calculateScore();\n        }\n      } else {\n        this.error = result.message;\n      }\n    } catch (error) {\n      console.error('Failed to validate move:', error);\n      this.error = 'Failed to validate move. Please try again.';\n    }\n  },\n\n  calculateScore() {\n    // Score based on efficiency vs optimal solution\n    if (this.optimalSteps > 0) {\n      const efficiency = this.optimalSteps / this.moves;\n      this.score = Math.max(100, Math.round(1000 * efficiency));\n    } else {\n      this.score = Math.max(100, 1000 - (this.moves * 50));\n    }\n  },\n\n  async showPossibleMoves() {\n    try {\n      this.loading = true;\n      const response = await fetch(`/api/word-ladder/possible-words/${this.currentWord}`);\n      this.hints = await response.json();\n      this.showHints = true;\n    } catch (error) {\n      console.error('Failed to get hints:', error);\n      this.error = 'Failed to get hints';\n    } finally {\n      this.loading = false;\n    }\n  },\n\n  hideHints() {\n    this.showHints = false;\n    this.hints = [];\n  },\n\n  async newGame() {\n    await this.loadRandomPair();\n    this.resetGame();\n  },\n\n  handleKeyPress(event) {\n    if (event.key === 'Enter') {\n      this.makeMove();\n    }\n  },\n\n  getStepStatus(index) {\n    if (index === 0) return 'start';\n    if (index === this.wordChain.length - 1 && this.isCompleted) return 'end';\n    return 'step';\n  },\n\n  getScoreColor() {\n    if (this.score >= 800) return 'text-green-600';\n    if (this.score >= 600) return 'text-yellow-600';\n    return 'text-red-600';\n  }\n}));\n\nAlpine.start();"],"names":["Alpine","pair","error","result","newWord","efficiency","response","event","index"],"mappings":"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"}