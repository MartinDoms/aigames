{"version":3,"file":"geography-quiz-nY_Xh1DO.js","sources":["../../src/js/geography-quiz.js"],"sourcesContent":["// Geography Quiz Game Logic\nimport Alpine from 'alpinejs';\n\ndocument.addEventListener('alpine:init', () => {\n    Alpine.data('geographyQuiz', () => ({\n        loading: true,\n        currentQuestion: null,\n        currentQuestionNumber: 1,\n        selectedAnswer: null,\n        answered: false,\n        isCorrect: false,\n        feedbackMessage: '',\n        score: 0,\n        totalQuestions: 0,\n        streak: 0,\n        bestScore: 0,\n        questionType: 'random',\n        \n        init() {\n            this.loadStats();\n            this.newQuestion();\n        },\n\n        async newQuestion() {\n            this.loading = true;\n            this.answered = false;\n            this.selectedAnswer = null;\n            this.isCorrect = false;\n            this.feedbackMessage = '';\n            this.totalQuestions++;\n\n            try {\n                const endpoint = this.questionType === 'random' \n                    ? '/api/geography-quiz/new-question'\n                    : `/api/geography-quiz/question/${this.questionType}`;\n                    \n                const response = await fetch(endpoint);\n                if (response.ok) {\n                    this.currentQuestion = await response.json();\n                } else {\n                    console.error('Failed to fetch question');\n                    this.feedbackMessage = 'Error loading question. Please try again.';\n                }\n            } catch (error) {\n                console.error('Error fetching question:', error);\n                this.feedbackMessage = 'Network error. Please check your connection.';\n            } finally {\n                this.loading = false;\n            }\n        },\n\n        async selectAnswer(answer) {\n            if (this.answered) return;\n\n            this.selectedAnswer = answer;\n            this.answered = true;\n\n            const requestData = {\n                question: this.currentQuestion.question,\n                userAnswer: answer,\n                correctAnswer: this.currentQuestion.correctAnswer,\n                explanation: this.currentQuestion.explanation\n            };\n\n            try {\n                const response = await fetch('/api/geography-quiz/check-answer', {\n                    method: 'POST',\n                    headers: {\n                        'Content-Type': 'application/json',\n                    },\n                    body: JSON.stringify(requestData)\n                });\n\n                if (response.ok) {\n                    const result = await response.json();\n                    this.isCorrect = result.isCorrect;\n                    this.feedbackMessage = result.message;\n\n                    if (this.isCorrect) {\n                        this.score++;\n                        this.streak++;\n                        if (this.streak > this.bestScore) {\n                            this.bestScore = this.streak;\n                        }\n                    } else {\n                        this.streak = 0;\n                    }\n\n                    this.saveStats();\n                } else {\n                    this.feedbackMessage = 'Error checking answer. Please try again.';\n                }\n            } catch (error) {\n                console.error('Error checking answer:', error);\n                this.feedbackMessage = 'Network error. Please try again.';\n            }\n        },\n\n        nextQuestion() {\n            this.currentQuestionNumber++;\n            this.newQuestion();\n        },\n\n        setQuestionType(type) {\n            this.questionType = type;\n            this.newQuestion();\n        },\n\n        getOptionButtonClass(option) {\n            if (!this.answered) {\n                return 'border-gray-300 text-gray-700 hover:border-blue-400';\n            }\n\n            if (option === this.currentQuestion.correctAnswer) {\n                return 'border-green-500 bg-green-100 text-green-800';\n            } else if (option === this.selectedAnswer && !this.isCorrect) {\n                return 'border-red-500 bg-red-100 text-red-800';\n            } else {\n                return 'border-gray-300 text-gray-500';\n            }\n        },\n\n        loadStats() {\n            try {\n                const saved = localStorage.getItem('geography-quiz-stats');\n                if (saved) {\n                    const stats = JSON.parse(saved);\n                    this.score = stats.score || 0;\n                    this.totalQuestions = stats.totalQuestions || 0;\n                    this.streak = stats.streak || 0;\n                    this.bestScore = stats.bestScore || 0;\n                }\n            } catch (error) {\n                console.error('Error loading stats:', error);\n            }\n        },\n\n        saveStats() {\n            try {\n                const stats = {\n                    score: this.score,\n                    totalQuestions: this.totalQuestions,\n                    streak: this.streak,\n                    bestScore: this.bestScore,\n                    lastPlayed: new Date().toISOString()\n                };\n                localStorage.setItem('geography-quiz-stats', JSON.stringify(stats));\n            } catch (error) {\n                console.error('Error saving stats:', error);\n            }\n        },\n\n        resetStats() {\n            this.score = 0;\n            this.totalQuestions = 0;\n            this.streak = 0;\n            this.bestScore = 0;\n            this.saveStats();\n        }\n    }));\n});\n\n// Initialize Alpine\nAlpine.start();"],"names":["Alpine","endpoint","response","error","answer","requestData","result","type","option","saved","stats"],"mappings":"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"}